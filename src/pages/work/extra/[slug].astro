---
import { contentfulClient } from "../../../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import { documentToPlainTextString } from "@contentful/rich-text-plain-text-renderer";
import type { extra } from "../../../lib/contentful";
import BaseHead from "../../../components/BaseHead.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import i18next, { t, changeLanguage } from "i18next";

changeLanguage("en");

export async function getStaticPaths() {
    const { items } = await contentfulClient.getEntries<extra>({
        content_type: "extra",
    });
    const pages = items.map((item) => ({
        params: { slug: item.fields.slug },
        props: {
            title: item.fields.title,
            description: item.fields.description,
            content: item.fields.content,
            year: item.fields.year,
            type: item.fields.type,
            services: item.fields.services,
            preview: item.fields.preview,
            blobColor: item.fields.color,
        },
    }));
    return pages;
}
const { content, title, description, year, type, services, blobColor, preview, } = Astro.props;
let options = {
    renderNode: {
        "embedded-asset-block": (node: any) => {
            const file = node.data.target.fields?.file;
            if (!file || !file.contentType) {
                return `<p class="flex flex-row items-center gap-3 font-[MGNHumble]"><svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-10 h-10"> <path d="M3 3h16v2H5v14h14v2H3V3zm18 0h-2v18h2V3zM11 15h2v2h-2v-2zm2-8h-2v6h2V7z" fill="currentColor"/> </svg> Unsupported asset type</p>`;
            }
            const mimeType = file.contentType;
            const url = file.url;
            if (mimeType.startsWith("image/")) {
                return `<img class="img-fluid" src="${url}" alt="${node.data.target.fields.title}"/>`;
            }
            else if (mimeType.startsWith("video/")) {
                return `<video class="video-fluid" autoplay loop muted>
                            <source src="${url}" type="${mimeType}">
                            Your browser does not support the video tag.
                        </video>`;
            }
            else if (mimeType === "application/pdf") {
                return `<embed src="${url}" type="application/pdf" width="100%" height="600px" />`;
            }
            else {
                return `<a href="${url}" target="_blank" class="pixel-corners mb-3 border border-white/20 bg-white/5 hover:bg-white/10 hover:text-white text-white flex flex-col items-center justify-between relative"><p class="p-3 w-full flex flex-row items-center justify-between relative" style="margin-bottom:0;"><span class="flex flex-row items-center gap-3"><svg class="w-6 relative" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M21 22H3V2h12v2h2v2h2v2h2v14zM17 6h-2v2h2V6zM5 4v16h14V10h-6V4H5zm8 12H7v2h6v-2zm-6-4h10v2H7v-2zm4-4H7v2h4V8z" fill="currentColor"/> </svg> ${node.data.target.fields.title}</span> <svg class="w-6" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M4 11v2H8v2H6v-2H4v-2h2V9h2v2h12zM10 7H8v2h2V7zm0 0h2V5h-2v2zm0 10H8v-2h2v2zm0 0h2v2h-2v-2z" fill="currentColor"/> </svg></p></a>`;
            }
        },
    },
};
let parsedSEOContent = documentToPlainTextString(content as any);
if (parsedSEOContent.length > 60) {
    parsedSEOContent = parsedSEOContent.slice(0, 160) + "...";
}
---

<html lang="en">
  <head>
    <BaseHead
      title={`${title} | extra | ${t("header.work")} | ${t("site.title")}`}
      description={`${type}\nServices: ${Array.isArray(services) && services.map((service) => " " + service)}\nYear: ${year}\n\n${parsedSEOContent}`}
      image={(preview as any)?.fields?.file?.url}
    />
  </head>

  <body>
    <Header isWork />
    <main
      onmouseover="follower()"
      onmouseleave="unfollower()"
      class="sm:h-screen m-0 p-0 flex flex-col sm:flex-row items-center overflow-visible sm:overflow-scroll snap-x snap-mandatory no-scrollbar"
    >
      <div class="w-screen pointer-events-none overflow-hidden sm:overflow-visible absolute">
        <img
          id="scrollingImage"
          class="w-[1000px] max-w-[1000px] opacity-60 z-0 transition-none"
          style={`filter: drop-shadow(0px 1000px 0 ${blobColor}); transform: translateY(-1250px) translateX(-400px); transition: 0s;`}
          alt=""
          src="/img/blobl.webp"
          transition:name={`work-title-${title}-blob`}
        />
      </div>
      <div
        id="scrollingText"
        class="mt-36 sm:mt-0 w-full max-w-[1800px] pointer-events-none"
      >
        <div class="flex items-center justify-center z-0">
          <div
            class="sm:ml-20 sm:mr-32 2xl:ml-32 top-6 w-[calc(100vw-40px)] sm:w-[600px] max-w-screen flex flex-col items-start justify-between gap-5 relative"
          >
            <div
              class="w-full flex flex-row items-center justify-between gap-6"
            >
              <div
                class="-translate-x-2 pixel-corners text-white font-semibold px-3 rounded z-10 absolute"
                transition:name={`work-${title}-extra`}
              >
                Extra
              </div>
            </div>
            <h3
              class="flex flex-row flex-wrap max-w-[400px] font-[MGNHumble] text-white text-5xl sm:text-6xl z-10 relative"
              transition:name={`work-title-${title}`}
            >
              {
                typeof title === "string" &&
                  title
                    .split(" ")
                    .map((word, index) => (
                      <span style={`margin-left: ${index * 20}px;`}>
                        {word}
                      </span>
                    ))
              }
            </h3>
            <div class="flex flex-row items-start gap-6 sm:gap-16">
              <div>
                <p class="opacity-60">{t("slug.client")}</p>
                <p
                  class="font-medium text-white text-xl sm:text-2xl"
                  transition:name={`work-title-${title}-type`}
                >
                  {type}
                </p>
              </div>
              <ul>
                <p class="opacity-60">{t("slug.services")}</p>
                {
                  Array.isArray(services) &&
                    services.map((service) => (
                      <li class="font-medium text-white text-xl sm:text-2xl">
                        {service}
                      </li>
                    ))
                }
              </ul>
              <div transition:name={`work-title-${title}-year`}>
                <p class="opacity-60">{t("slug.year")}</p>
                <p class="font-medium text-white text-xl sm:text-2xl">
                  {typeof year === "string" ? year.slice(0, 4) : year}
                </p>
              </div>
            </div>
            <div set:html={description} class="text-white" />
          </div>
        </div>
      </div>
      <div
        class="mt-20 sm:mt-0 sm:ml-0 sm:mr-20 flex flex-col sm:flex-row gap-20 pointer-events-none"
      >
        {
          Array.isArray(content) &&
            content.map((item, index) => (
              <div class="w-screen sm:w-[700px] max-w-screen p-2 relative">
                <img
                  src={item.fields.file.url}
                  alt=""
                  class="w-full object-cover"
                  transition:name={
                    index === 0 ? `work-title-${title}-image` : undefined
                  }
                />
                <p class="mt-3">{item.fields.description}</p>
              </div>
            ))
        }
      </div>
    </main>
    <div
      class="hidden bottom-20 right-10 sm:flex flex-row items-center opacity-30 hover:opacity-100 absolute transition-all"
    >
      <button
        class="hover:border-2 border-black p-2 hover:bg-white/20 active:scale-95 w-12 invert transition-all"
        onclick="scrollImp(-400);"
        ><svg
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <path
            d="M20 11v2H8v2H6v-2H4v-2h2V9h2v2h12zM10 7H8v2h2V7zm0 0h2V5h-2v2zm0 10H8v-2h2v2zm0 0h2v2h-2v-2z"
            fill="currentColor"></path>
        </svg></button
      >
      <button
        class="hover:border-2 border-black p-2 hover:bg-white/20 active:scale-95 w-12 invert transition-all"
        onclick="scrollImp(400);"
        ><svg
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <path
            d="M4 11v2h12v2h2v-2h2v-2h-2V9h-2v2H4zm10-4h2v2h-2V7zm0 0h-2V5h2v2zm0 10h2v-2h-2v2zm0 0h-2v2h2v-2z"
            fill="currentColor"></path>
        </svg></button
      >
    </div>
    <Footer />
  </body><div
    id="follower"
    class="-translate-x-1/2 -translate-y-1/2 absolute w-16 h-16 p-3 border-2 border-white rounded-full z-10 pointer-events-none"
    style="display:none; transition: width 0.2s, height 0.2s;"
  >
    <svg
      class="invert"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        d="M15 9V7h2v2h-2zm2 6v-2h-4v-2h4V9h2v2h2v2h-2v2h-2zm0 0v2h-2v-2h2zm-6-4v2H7v2H5v-2H3v-2h2V9h2v2h4zm-4 4h2v2H7v-2zm2-8v2H7V7h2z"
        fill="currentColor"></path>
    </svg>
  </div>
</html>

<script is:inline>
  function follower() {
    if (window.innerWidth < 768) return;
    document.body.style.userSelect = "none";
    document.body.style.cursor = "none";
    document.getElementById("follower").style.animation =
      "expandFollower 0.2s cubic-bezier(0, 0, 0, 1) forwards";
    document.getElementById("follower").style.display = "block";
    // follow the mouse
    document.onmousemove = function (e) {
      var x = e.pageX;
      var y = e.pageY;
      document.getElementById("follower").style.left = x + "px";
      document.getElementById("follower").style.top = y + "px";
    };
  }
  function unfollower() {
    document.body.style.userSelect = "auto";
    document.getElementById("follower").style.animation =
      "shrinkFollower 0.2s cubic-bezier(0, 0, 0, 1) forwards";
    setTimeout(() => {
      document.body.style.cursor = "auto";
      document.getElementById("follower").style.display = "none";
    }, 200);
  }
  document.addEventListener("astro:page-load", () => {
    const videos = document.querySelectorAll("video");
    videos.forEach((video) => {
      video.load();
    });

    const main = document.querySelector("main");
    const scrollingImage = document.getElementById("scrollingImage");
    const scrollingText = document.getElementById("scrollingText");

    main.addEventListener("scroll", () => {
      const scrollLeft = main.scrollLeft;
      const maxScrollLeft = main.scrollWidth - main.clientWidth;
      const opacity = 1 - scrollLeft / maxScrollLeft;

      scrollingText.style.transform = `translateX(${scrollLeft * 0.1}px)`;
      scrollingText.style.opacity = opacity < 0 ? 0 : opacity;
      scrollingImage.style.transform = `translateY(-1250px) translateX(${scrollLeft * -0.5 - 400}px)`;
      scrollingImage.style.opacity = opacity < 0 ? 0 : opacity * 0.6;
    });

    let mouseDown = false;
    let startX, scrollLeft;

    const startDragging = (e) => {
      mouseDown = true;
      startX = e.pageX - main.offsetLeft;
      scrollLeft = main.scrollLeft;
    };

    const stopDragging = () => {
      mouseDown = false;
    };

    const move = (e) => {
      e.preventDefault();
      if (!mouseDown) return;
      const x = e.pageX - main.offsetLeft;
      const scroll = x - startX;
      main.scrollLeft = scrollLeft - scroll;
    };

    main.addEventListener("mousemove", move, false);
    main.addEventListener("mousedown", startDragging, false);
    main.addEventListener("mouseup", stopDragging, false);
    main.addEventListener("mouseleave", stopDragging, false);
  });

  document.addEventListener("mousedown", click);
  document.addEventListener("mouseup", unclick);

  function click() {
    console.log("click");
    const follower = document.getElementById("follower");
    follower.style.width = "3.5rem";
    follower.style.height = "3.5rem";
  }

  function unclick() {
    console.log("unclick");
    const follower = document.getElementById("follower");
    follower.style.width = "4rem";
    follower.style.height = "4rem";
  }

  function scrollImp(amount) {
    document.querySelector("main").scrollBy({
      left: amount,
      behavior: "smooth",
    });
  }
</script>

<style is:global>
  .expand {
    animation: auto linear expand both;
    animation-timeline: view();
    animation-range: exit;
  }
  @keyframes expand {
    0% {
      opacity: 1;
      transform: translate(0, 0);
      filter: grayscale(0) blur(0);
    }
    100% {
      opacity: 0;
      transform: translate(0, 100px);
      filter: grayscale(1) blur(5px);
    }
  }

  .float-container {
    gap: 18px;
    margin-top: 38px;
    padding-top: 28px;
    padding-bottom: 28px;
  }

  .float p {
    margin: 0 !important;
  }

  h3,
  h4 {
    font-family: "InstrumentSans";
    font-weight: 550;
  }

  div {
    line-height: 1.5 !important;
  }

  p {
    line-height: 1.5 !important;
  }

  @media (min-width: 768px) {
    .no-scrollbar {
      -ms-overflow-style: none; /* Internet Explorer 10+ */
      scrollbar-width: none; /* Firefox */
    }

    .no-scrollbar::-webkit-scrollbar {
      display: none; /* Safari and Chrome */
    }
  }

  .expandFollower {
    animation: expandFollower 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  @keyframes expandFollower {
    0% {
      transform: translate(-50%, -50%) scale(0);
    }
    100% {
      transform: translate(-50%, -50%) scale(1);
    }
  }

  .shrinkFollower {
    animation: shrinkFollower 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  @keyframes shrinkFollower {
    0% {
      transform: translate(-50%, -50%) scale(1);
    }
    100% {
      transform: translate(-50%, -50%) scale(0);
    }
  }

  .pixel-corners,
  .pixel-corners--wrapper {
    clip-path: polygon(
      0px calc(100% - 6px),
      3px calc(100% - 6px),
      3px calc(100% - 3px),
      6px calc(100% - 3px),
      6px 100%,
      calc(100% - 6px) 100%,
      calc(100% - 6px) calc(100% - 3px),
      calc(100% - 3px) calc(100% - 3px),
      calc(100% - 3px) calc(100% - 6px),
      100% calc(100% - 6px),
      100% 6px,
      calc(100% - 3px) 6px,
      calc(100% - 3px) 3px,
      calc(100% - 6px) 3px,
      calc(100% - 6px) 0px,
      6px 0px,
      6px 3px,
      3px 3px,
      3px 6px,
      0px 6px
    );
    position: relative;
  }
  .pixel-corners {
    border: 3px solid transparent;
  }
  .pixel-corners--wrapper {
    width: fit-content;
    height: fit-content;
  }
  .pixel-corners--wrapper .pixel-corners {
    display: block;
    clip-path: polygon(
      3px 6px,
      6px 6px,
      6px 3px,
      calc(100% - 6px) 3px,
      calc(100% - 6px) 6px,
      calc(100% - 3px) 6px,
      calc(100% - 3px) calc(100% - 6px),
      calc(100% - 6px) calc(100% - 6px),
      calc(100% - 6px) calc(100% - 3px),
      6px calc(100% - 3px),
      6px calc(100% - 6px),
      3px calc(100% - 6px)
    );
  }
  .pixel-corners::after,
  .pixel-corners--wrapper::after {
    content: "";
    position: absolute;
    clip-path: polygon(
      0px calc(100% - 6px),
      3px calc(100% - 6px),
      3px calc(100% - 3px),
      6px calc(100% - 3px),
      6px 100%,
      calc(100% - 6px) 100%,
      calc(100% - 6px) calc(100% - 3px),
      calc(100% - 3px) calc(100% - 3px),
      calc(100% - 3px) calc(100% - 6px),
      100% calc(100% - 6px),
      100% 6px,
      calc(100% - 3px) 6px,
      calc(100% - 3px) 3px,
      calc(100% - 6px) 3px,
      calc(100% - 6px) 0px,
      6px 0px,
      6px 3px,
      3px 3px,
      3px 6px,
      0px 6px,
      0px 50%,
      3px 50%,
      3px 6px,
      6px 6px,
      6px 3px,
      calc(100% - 6px) 3px,
      calc(100% - 6px) 6px,
      calc(100% - 3px) 6px,
      calc(100% - 3px) calc(100% - 6px),
      calc(100% - 6px) calc(100% - 6px),
      calc(100% - 6px) calc(100% - 3px),
      6px calc(100% - 3px),
      6px calc(100% - 6px),
      3px calc(100% - 6px),
      3px 50%,
      0px 50%
    );
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background: #ffffff;
    display: block;
    pointer-events: none;
  }
  .pixel-corners::after {
    margin: -3px;
  }
  .pixel-corners:active {
    transform: translate(0, 3px);
  }

  .no-scrollbar {
    overflow-x: visible;
    overflow-y: visible;
  }

  @media (min-width: 768px) {
    .float-container {
      display: flex;
      flex-direction: column !important;
    }

    .no-scrollbar {
      overflow-x: scroll !important;
      overflow-y: hidden !important;
    }
  }

  .snap-x {
    scroll-snap-type: x mandatory;
  }

  .snap-start {
    scroll-snap-align: start;
  }

  .scroll-button {
    position: fixed;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    padding: 10px;
    cursor: pointer;
    z-index: 10;
  }

  .scroll-button.left-0 {
    left: 10px;
  }

  .scroll-button.right-0 {
    right: 10px;
  }
</style>
