---
import { contentfulClient } from "../../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import { documentToPlainTextString } from "@contentful/rich-text-plain-text-renderer";
import type { work } from "../../lib/contentful";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import i18next, { t, changeLanguage } from "i18next";

changeLanguage("en");

export async function getStaticPaths() {
    const { items } = await contentfulClient.getEntries<work>({
        content_type: "work",
    });
    const pages = items.map((item) => ({
        params: { slug: item.fields.slug },
        props: {
            title: item.fields.title,
            content: item.fields.content,
            year: item.fields.year,
            type: item.fields.type,
            services: item.fields.services,
            preview: item.fields.preview,
            heroImage: item.fields.heroImage,
        },
    }));
    return pages;
}
const { content, title, year, type, services, heroImage } = Astro.props;
let options = {
    renderNode: {
        "embedded-asset-block": (node: any) => `<img class="img-fluid" src="${node.data.target.fields.file.url}"/>`,
    },
};
let parsedSEOContent = documentToPlainTextString(content);
if (parsedSEOContent.length > 60) {
    parsedSEOContent = parsedSEOContent.slice(0, 160) + "...";
}
let bodyHTML = content ? documentToHtmlString(content, options) : "";
function parseLocalizedContent(html) {
    const regex = /<p>&lt;begin-localization=&quot;(.*?)&quot;&gt;<\/p>(.*?)<p>&lt;end-localization=&quot;\1&quot;&gt;<\/p>/gs;
    let match;
    const localizedContent = [];
    while ((match = regex.exec(html)) !== null) {
        localizedContent.push({
            lang: match[1],
            content: match[2].trim(),
        });
    }
    return localizedContent;
}
function parseFloatTags(html) {
    const floatRegex = /<p>&lt;float(.*?)&gt;<\/p>(.*?)<p>&lt;end-float&gt;<\/p>/gs;
    const floatLeftRegex = /<p>&lt;float-left&gt;<\/p>(.*?)<p>&lt;end-float-left&gt;<\/p>/gs;
    const floatRightRegex = /<p>&lt;float-right&gt;<\/p>(.*?)<p>&lt;end-float-right&gt;<\/p>/gs;
    let match;
    let floatHTML = html;
    while ((match = floatRegex.exec(html)) !== null) {
        const styleMatch = match[1].match(/style=&quot;(.*?)&quot;/);
        const style = styleMatch ? `style="${styleMatch[1]} display:flex; justify-content:space-between; padding-top:12px; padding-bottom:12px; background-color:var(--bg-color); box-shadow: 0 0 0 100vmax var(--bg-color); clip-path: inset(0 -100vmax);"` : "style=\"display:flex; justify-content:space-between;\"";
        const content = match[2]
            .replace(floatLeftRegex, "<div class=\"float\">$1</div>")
            .replace(floatRightRegex, "<div class=\"float\">$1</div>");
        floatHTML = floatHTML.replace(match[0], `<div class="float-container" ${style}>${content}</div>`);
    }
    return floatHTML;
}
const localizedContentArray = parseLocalizedContent(bodyHTML);
const currentLanguage = i18next.language;
const defaultLanguage = "en";
const localizedContent = localizedContentArray.find(item => item.lang === currentLanguage);
const defaultContent = localizedContentArray.find(item => item.lang === defaultLanguage);
bodyHTML = localizedContent?.content || defaultContent?.content || bodyHTML;
bodyHTML = parseFloatTags(bodyHTML); // Ensure parseFloatTags is called on the localized content
---

<html lang="en">
  <head>
    <BaseHead
      title={`${title} | ${t("header.work")} | ${t("site.title")}`}
      description={`${type}\nServices: ${Array.isArray(services) && services.map((service) => " " + service)}\nYear: ${year}\n\n${parsedSEOContent}`}
      image={(heroImage as any)?.fields?.file?.url}
    />
  </head>

  <body>
    <Header/>
    <main class="flex flex-col items-center">
      <div class="w-full">
        <div class="flex items-end justify-end rounded-none">
          {
            heroImage && (
              <div
                class="expand w-[95%] max-w-[calc(100%-300px)] h-[40vh] relative"
                style={`background-size:cover; background-position:center; background-image: url('${(heroImage as any)?.fields?.file?.url}')`}
                transition:name={`work-title-${title}-image`}
              />
            )
          }
        </div>
        <div class="flex items-center justify-center">
          <div
            class="top-6 w-[95%] max-w-[1300px] flex sm:flex-row flex-col items-start justify-between gap-5 relative"
          >
            <img
              class="w-[700px] -translate-x-[150px] -translate-y-[350px] rotate-90 opacity-60 z-0 absolute"
              src="/img/blob-1.webp"
              transition:name={`work-title-${title}-blob`}
            />
            <h3
              class="max-w-[400px] font-[MGNHumble] text-white text-6xl z-10 relative"
              transition:name={`work-title-${title}`}
            >
              {title}
            </h3>
            <div>
              <p class="opacity-60">{t("slug.client")}</p>
            <p
              class="font-medium text-white text-2xl"
              transition:name={`work-title-${title}-type`}
            >
              {type}
            </p>
          </div>
            <ul>
              <p class="opacity-60">{t("slug.services")}</p>
              {
                Array.isArray(services) &&
                  services.map((service) => (
                    <li class="font-medium text-white text-2xl">{service}</li>
                  ))
              }
            </ul>
            <div transition:name={`work-title-${title}-year`}>
              <p class="opacity-60">{t("slug.year")}</p>
              <p class="font-medium text-white text-2xl">{year}</p>
            </div>
          </div>
        </div>
      </div>
      <article class="mt-48 w-[98%] max-w-[1200px] text-white z-10 relative">
        <div class="prose">
          <div class="title"></div>
          <div set:html={bodyHTML} />
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>

<style>
  .expand {
    animation: auto linear expand both;
    animation-timeline: view();
    animation-range: exit;
  }
  @keyframes expand {
    0% {
      opacity: 1;
      transform: translate(0, 0);
      filter: grayscale(0) blur(0);
    }
    100% {
      opacity: 0;
      transform: translate(0, 100px);
      filter: grayscale(1) blur(5px);
    }
  }

  .float-left {
    flex: 1;
    margin-right: 10px;
  }

  .float-right {
    flex: 1;
    margin-left: 10px;
  }
</style>