---
import { contentfulClient } from "../../../lib/contentful";
import type { work } from "../../../lib/contentful";
import { localizePath } from "astro-i18next";
import BaseHead from "../../../components/BaseHead.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import i18next, { t, changeLanguage } from "i18next";

changeLanguage("ca");

const entries = await contentfulClient.getEntries<work>({
    content_type: "work",
});
const posts = entries.items.map((item) => {
    const { title, slug, type, year, preview, gif, blobColor } = item.fields;
    return {
        title,
        slug,
        type,
        year,
        preview,
        gif,
        splitTitle: title.split(" "),
        blobColor,
    };
});
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={`${t("header.work")} | ${t("site.title")}`}
      description={t("site.description")}
    />
  </head>
  <body>
    <Header />
    <iframe
      src="/html/frame_pulse.html"
      class="top-0 left-0 w-full h-full z-0 transition-all fixed"
      transition:name="bg-iframe"></iframe>
    <main class="pt-40 flex flex-col items-center justify-center relative">
      <div
        class="mb-6 max-w-[1400px] w-[95%] flex flex-row items-center justify-between gap-20 z-1 relative"
      >
        <h1
          class="w-screen m-0 my-18 mb-28 text-8xl font-[MGNHumble] text-center text-white translate-y-3"
          transition:name="work-head-title"
        >
          {t("header.work")}
        </h1>
      </div>
      <section class="max-w-[1400px] w-[95%] relative">
        <ul
          class="mt-3 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 grid-rows-2 sm:gap-16 gap-6"
        >
          {
            posts.map((post, index) => (
              <li
                data-type={post.type}
                class={`mb-6 hover:shadow-xl shadow-white z-0 hover:z-10 relative ${index % 2 !== 0 ? "lg:top-32 move-fast" : "move-slow"}`}
                style="aspect-ratio: 1 / 1;"
              >
                <a
                  class="flex flex-row items-start justify-between gap-5 relative"
                  href={localizePath(`/work/${post.slug}/`)}
                >
                  <div class={`img-${index} work-hover w-full h-full overflow-hidden transition-all z-10 relative`} onmousemove={`handleMouseMove(${index})`} onmouseleave={`resetTransform(${index})`}>
                    {post.preview && (
                      <>
                        <img
                          src={(post.preview as any)?.fields?.file?.url}
                          alt=""
                          class={`w-full h-full object-cover ${post.gif ? 'img' : ''}`}
                          transition:name={`work-title-${post.title}-image`}
                        />
                        {post.gif && (
                          <img
                            src={(post.gif as any)?.fields?.file?.url}
                            alt=""
                            class="gif top-0 w-full h-full object-cover absolute"
                            transition:name={`work-title-${post.title}-gif`}
                          />
                        )}
                      </>
                    )}
                  </div>
                  <div style="opacity:0.7; overflow:hidden;">
                  <img
                    src="/img/blob-1.webp"
                    alt=""
                    transition:name={`work-title-${post.title}-blob`}
                    class="hover-show -translate-x-1/2 translate-y-1/3 pointer-events-none z-0 absolute"
                    style={`filter: drop-shadow(0px -1000px 0 ${post.blobColor}); transform: scale(150%) translateY(1050px) translateX(-300px);`}
                  />
                  </div>
                  <div class="hover-show bottom-0 right-0 translate-y-[80%] w-full items-center justify-end flex flex-row pointer-events-none z-10 absolute">
                    <h2
                      class="sm:flex hidden bottom-0 left-0 w-[230px] -translate-x-1/2 -translate-y-6 flex-wrap text-left m-0 fadeup font-[MGNHumble] text-white z-10 absolute"
                      transition:name={`work-title-${post.title}`}
                    >
                      {post.splitTitle.map((word, index) => (
                        <span style={`animation: fadeupword 0.3s cubic-bezier(0, 0, 0, 1) ${index * 0.3}s forwards; opacity: 0; margin-left: ${index * 10}px;`}>
                          {word}
                        </span>
                      ))}
                    </h2>
                    <div class="-translate-x-4 translate-y-3 flex flex-col items-end">
                      <p
                        class={`m-0 text-white text-right text-2xl font-semibold`}
                        transition:name={`work-title-${post.title}-type`}
                      >
                        {post.type}
                      </p>
                      <p
                        class={`m-0 text-white text-right text-lg opacity-60`}
                        transition:name={`work-title-${post.title}-year`}
                      >
                        {post.year}
                      </p>
                    </div>
                  </div>
                </a>
              </li>
            ))
          }
        </ul>
      </section>
    </main>
    <Footer />
  </body>
</html>

<script is:inline data-astro-rerun>
  window.addEventListener("scroll", () => {
    const scrollPosition = window.scrollY;
    const screenWidth = window.innerWidth;

    if (screenWidth > 1200) {
      const moveFastElements = document.querySelectorAll(".move-fast");
      const moveSlowElements = document.querySelectorAll(".move-slow");

      moveFastElements.forEach((element) => {
        element.style.transform = `translateY(-${scrollPosition * 0.3}px)`;
      });

      moveSlowElements.forEach((element) => {
        element.style.transform = `translateY(-${scrollPosition * 0.1}px)`;
      });
    } else {
      moveFastElements.forEach((element) => {
        element.style.transform = `translateY(0px)`;
      });
      moveSlowElements.forEach((element) => {
        element.style.transform = `translateY(0px)`;
      });
    }
  });
</script>

                  
<script is:inline>
  function handleMouseMove(id) {
    const target = document.querySelector(`.img-${id}`);
    const rect = target.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const moveX = (x / rect.width - 0.5) * 5; // Adjust the multiplier for desired effect
    const moveY = (y / rect.height - 0.5) * 5; // Adjust the multiplier for desired effect

    target.querySelectorAll('img').forEach(img => {
      img.style.transform = `scale(1.05) translate(${moveX}px, ${moveY}px)`;
    });
  }

  function resetTransform(id) {
    const target = document.querySelector(`.img-${id}`);
    target.querySelectorAll('img').forEach(img => {
      img.style.transform = 'scale(1) translate(0, 0)';
    });
  }
</script>

<style>
  @supports (animation-timeline: view()) {
  @keyframes animate-in-and-out {
    entry 0% {
      opacity: 0;
      scale: 0.8;
    }
    entry 100% {
      opacity: 1;
      scale: 1;
    }
    exit 0% {
      opacity: 1;
      scale: 1;
    }
    exit 100% {
      opacity: 0;
      scale: 0.8;
    }
  }

  ul li {
    opacity: 0;
    scale: 0.8;
    animation: linear animate-in-and-out;
    animation-timeline: view();
  }
}

@keyframes fadeupword {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.work-hover:hover .gif {
  opacity: 1;
  transition: 0.3s cubic-bezier(0, 0, 0, 1);
}
.work-hover:hover .img {
  opacity: 0;
  transition: 0.3s cubic-bezier(0, 0, 0, 1);
}
.work-hover .img {
  opacity: 1;
  transition: 0.3s cubic-bezier(0, 0, 0, 1);
}
.work-hover .gif {
  opacity: 0;
  transition: 0.3s cubic-bezier(0, 0, 0, 1);
}
</style>
