---
import { contentfulClient } from "../../../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import { documentToPlainTextString } from "@contentful/rich-text-plain-text-renderer";
import type { work } from "../../../lib/contentful";
import BaseHead from "../../../components/BaseHead.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import i18next, { t, changeLanguage } from "i18next";

changeLanguage("ca");

export async function getStaticPaths() {
    const { items } = await contentfulClient.getEntries<work>({
        content_type: "work",
    });
    const pages = items.map((item) => ({
        params: { slug: item.fields.slug },
        props: {
            title: item.fields.title,
            content: item.fields.content,
            year: item.fields.year,
            type: item.fields.type,
            services: item.fields.services,
            preview: item.fields.preview,
            heroImage: item.fields.heroImage,
            blobColor: item.fields.blobColor,
        },
    }));
    return pages;
}
const { content, title, year, type, services, heroImage, blobColor } = Astro.props;
let options = {
    renderNode: {
        "embedded-asset-block": (node: any) => {
            const file = node.data.target.fields?.file;
            if (!file || !file.contentType) {
                return `<p class="flex flex-row items-center gap-3 font-[MGNHumble]"><svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-10 h-10"> <path d="M3 3h16v2H5v14h14v2H3V3zm18 0h-2v18h2V3zM11 15h2v2h-2v-2zm2-8h-2v6h2V7z" fill="currentColor"/> </svg> Unsupported asset type</p>`;
            }
            const mimeType = file.contentType;
            const url = file.url;
            if (mimeType.startsWith("image/")) {
                return `<img class="img-fluid" src="${url}" alt="${node.data.target.fields.title}"/>`;
            }
            else if (mimeType.startsWith("video/")) {
                return `<video class="video-fluid" autoplay loop muted>
                            <source src="${url}" type="${mimeType}">
                            Your browser does not support the video tag.
                        </video>`;
            }
            else if (mimeType === "application/pdf") {
                return `<embed src="${url}" type="application/pdf" width="100%" height="600px" />`;
            }
            else {
                return `<a href="${url}" target="_blank" class="pixel-corners mb-3 border border-white/20 bg-white/5 hover:bg-white/10 hover:text-white text-white flex flex-col items-center justify-between relative"><p class="p-3 w-full flex flex-row items-center justify-between relative" style="margin-bottom:0;"><span class="flex flex-row items-center gap-3"><svg class="w-6 relative" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M21 22H3V2h12v2h2v2h2v2h2v14zM17 6h-2v2h2V6zM5 4v16h14V10h-6V4H5zm8 12H7v2h6v-2zm-6-4h10v2H7v-2zm4-4H7v2h4V8z" fill="currentColor"/> </svg> ${node.data.target.fields.title}</span> <svg class="w-6" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M4 11v2h12v2h2v-2h2v-2h-2V9h-2v2H4zm10-4h2v2h-2V7zm0 0h-2V5h2v2zm0 10h2v-2h-2v2zm0 0h-2v2h2v-2z" fill="currentColor"/> </svg></p></a>`;
            }
        },
    },
};
let parsedSEOContent = documentToPlainTextString(content);
if (parsedSEOContent.length > 60) {
    parsedSEOContent = parsedSEOContent.slice(0, 160) + "...";
}
let bodyHTML = content ? documentToHtmlString(content, options) : "";
function parseLocalizedContent(html) {
    const regex = /<p>&lt;begin-localization=&quot;(.*?)&quot;&gt;<\/p>(.*?)<p>&lt;end-localization=&quot;\1&quot;&gt;<\/p>/gs;
    let match;
    const localizedContent = [];
    while ((match = regex.exec(html)) !== null) {
        localizedContent.push({
            lang: match[1],
            content: match[2].trim(),
        });
    }
    return localizedContent;
}
function parseFloatTags(html) {
    const embedRegex = /<p>&lt;embed(.*?)&gt;<\/p>(.*?)<p>&lt;end-embed&gt;<\/p>/gs;
    const floatRegex = /<p>&lt;float(.*?)&gt;<\/p>(.*?)<p>&lt;end-float&gt;<\/p>/gs;
    const floatLeftRegex = /<p>&lt;float-left&gt;<\/p>(.*?)<p>&lt;end-float-left&gt;<\/p>/gs;
    const floatRightRegex = /<p>&lt;float-right&gt;<\/p>(.*?)<p>&lt;end-float-right&gt;<\/p>/gs;
    let match;
    let floatHTML = html;
    while ((match = floatRegex.exec(html)) !== null) {
        const styleMatch = match[1].match(/style=&quot;(.*?)&quot;/);
        const style = styleMatch
            ? `style="${styleMatch[1]} display:flex; justify-content:space-between; background-color:var(--bg-color); box-shadow: 0 0 0 100vmax var(--bg-color); clip-path: inset(0 -100vmax);"`
            : "style=\"display:flex; justify-content:space-between;\"";
        // Check if content contains float-left or float-right
        let content = match[2];
        const hasFloats = floatLeftRegex.test(content) || floatRightRegex.test(content);
        if (hasFloats) {
            const processedContent = content
                .replace(floatLeftRegex, "<div class=\"float\">$1</div>")
                .replace(floatRightRegex, "<div class=\"float\">$1</div>");
            floatHTML = floatHTML.replace(match[0], `<div class="float-container" ${style}>${processedContent}</div>`);
        }
        else {
            // Handle direct content without floats
            floatHTML = floatHTML.replace(match[0], `<div class="float-container" ${style}>${content}</div>`);
        }
    }
    while ((match = embedRegex.exec(html)) !== null) {
        const styleMatch = match[1].match(/style=&quot;(.*?)&quot;/);
        const style = styleMatch
            ? `style="${styleMatch[1]} aspect-ratio: 16/10;"`
            : "style=\"aspect-ratio: 16/10;\"";
        let content = match[2];
        content = content.replace(/<\/?p>/g, ""); // Remove surrounding <p> tags
        floatHTML = floatHTML.replace(match[0], `<iframe class="w-full" title="Embed Content" ${style} src="${content}"></iframe>`);
    }
    return floatHTML;
}
function parseCenterTags(html) {
    const centerRegex = /<p>&lt;center&gt;<\/p>(.*?)<p>&lt;end-center&gt;<\/p>/gs;
    let match;
    let centerHTML = html;
    while ((match = centerRegex.exec(html)) !== null) {
        centerHTML = centerHTML.replace(match[0], `<div class="center">${match[1]}</div>`);
    }
    return centerHTML;
}
const localizedContentArray = parseLocalizedContent(bodyHTML);
const currentLanguage = i18next.language;
const defaultLanguage = "en";
const localizedContent = localizedContentArray.find((item) => item.lang === currentLanguage);
const defaultContent = localizedContentArray.find((item) => item.lang === defaultLanguage);
bodyHTML = localizedContent?.content || defaultContent?.content || bodyHTML;
bodyHTML = parseFloatTags(bodyHTML); // Ensure parseFloatTags is called on the localized content
bodyHTML = parseCenterTags(bodyHTML); // Ensure parseCenterTags is called on the localized content
---

<html lang="en">
  <head>
    <BaseHead
      title={`${title} | ${t("header.work")} | ${t("site.title")}`}
      description={`${type}\nServices: ${Array.isArray(services) && services.map((service) => " " + service)}\nYear: ${year}\n\n${parsedSEOContent}`}
      image={(heroImage as any)?.fields?.file?.url}
    />
  </head>

  <body>
    <Header isWork />
    <main class="m-0 p-0 flex flex-col items-center">
      <div class="w-full max-w-[1800px]">
        <div class="flex items-end justify-end rounded-none z-10 relative">
          {
            heroImage && (
              <div
                class="expand w-full sm:w-[95%] sm:max-w-[calc(100%-300px)] h-[380px] relative"
                style={`background-size:cover; background-position:center; background-image: url('${(heroImage as any)?.fields?.file?.url}')`}
                transition:name={`work-title-${title}-image`}
              />
            )
          }
        </div>
        <div class="flex items-center justify-center z-0">
          <div
            class="top-6 w-[90%] max-w-[1300px] flex sm:flex-row flex-col items-start justify-between gap-5 relative"
          >
            <div style="position:absolute;">
              <img
                class="hidden sm:block w-[900px] opacity-60 z-0"
                style={`filter: drop-shadow(0px 1000px 0 ${blobColor}); transform: translateY(-1350px) translateX(-300px);`}
                alt=""
                src="/img/blobl.webp"
                transition:name={`work-title-${title}-blob`}
              />
            </div>
            <h3
              class="max-w-[400px] font-[MGNHumble] text-white text-6xl z-10 relative"
              transition:name={`work-title-${title}`}
            >
              {title}
            </h3>
            <div>
              <p class="opacity-60">{t("slug.client")}</p>
              <p
                class="font-medium text-white text-2xl"
                transition:name={`work-title-${title}-type`}
              >
                {type}
              </p>
            </div>
            <ul>
              <p class="opacity-60">{t("slug.services")}</p>
              {
                Array.isArray(services) &&
                  services.map((service) => (
                    <li class="font-medium text-white text-2xl">{service}</li>
                  ))
              }
            </ul>
            <div transition:name={`work-title-${title}-year`}>
              <p class="opacity-60">{t("slug.year")}</p>
              <p class="font-medium text-white text-2xl">{year}</p>
            </div>
          </div>
        </div>
      </div>
      <article class="mt-48 w-[90%] max-w-[1200px] text-white z-10 relative">
        <div class="prose">
          <div set:html={bodyHTML} />
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const videos = document.querySelectorAll("video");
    videos.forEach((video) => {
      video.load();
    });
  });
</script>

<style is:global>
  .expand {
    animation: auto linear expand both;
    animation-timeline: view();
    animation-range: exit;
  }
  @keyframes expand {
    0% {
      opacity: 1;
      transform: translate(0, 0);
      filter: grayscale(0) blur(0);
    }
    100% {
      opacity: 0;
      transform: translate(0, 100px);
      filter: grayscale(1) blur(5px);
    }
  }

  .float-container {
    gap: 18px;
    margin-top: 38px;
    padding-top: 28px;
    padding-bottom: 28px;
  }

  .float p {
    margin: 0 !important;
  }

  h3, h4 {
    font-family: "InstrumentSans";
    font-weight:550;
  }

  p {
    line-height: 28px;
  }

  .pixel-corners,
  .pixel-corners--wrapper {
    clip-path: polygon(
      0px calc(100% - 6px),
      3px calc(100% - 6px),
      3px calc(100% - 3px),
      6px calc(100% - 3px),
      6px 100%,
      calc(100% - 6px) 100%,
      calc(100% - 6px) calc(100% - 3px),
      calc(100% - 3px) calc(100% - 3px),
      calc(100% - 3px) calc(100% - 6px),
      100% calc(100% - 6px),
      100% 6px,
      calc(100% - 3px) 6px,
      calc(100% - 3px) 3px,
      calc(100% - 6px) 3px,
      calc(100% - 6px) 0px,
      6px 0px,
      6px 3px,
      3px 3px,
      3px 6px,
      0px 6px
    );
    position: relative;
  }
  .pixel-corners {
    border: 3px solid transparent;
  }
  .pixel-corners--wrapper {
    width: fit-content;
    height: fit-content;
  }
  .pixel-corners--wrapper .pixel-corners {
    display: block;
    clip-path: polygon(
      3px 6px,
      6px 6px,
      6px 3px,
      calc(100% - 6px) 3px,
      calc(100% - 6px) 6px,
      calc(100% - 3px) 6px,
      calc(100% - 3px) calc(100% - 6px),
      calc(100% - 6px) calc(100% - 6px),
      calc(100% - 6px) calc(100% - 3px),
      6px calc(100% - 3px),
      6px calc(100% - 6px),
      3px calc(100% - 6px)
    );
  }
  .pixel-corners::after,
  .pixel-corners--wrapper::after {
    content: "";
    position: absolute;
    clip-path: polygon(
      0px calc(100% - 6px),
      3px calc(100% - 6px),
      3px calc(100% - 3px),
      6px calc(100% - 3px),
      6px 100%,
      calc(100% - 6px) 100%,
      calc(100% - 6px) calc(100% - 3px),
      calc(100% - 3px) calc(100% - 3px),
      calc(100% - 3px) calc(100% - 6px),
      100% calc(100% - 6px),
      100% 6px,
      calc(100% - 3px) 6px,
      calc(100% - 3px) 3px,
      calc(100% - 6px) 3px,
      calc(100% - 6px) 0px,
      6px 0px,
      6px 3px,
      3px 3px,
      3px 6px,
      0px 6px,
      0px 50%,
      3px 50%,
      3px 6px,
      6px 6px,
      6px 3px,
      calc(100% - 6px) 3px,
      calc(100% - 6px) 6px,
      calc(100% - 3px) 6px,
      calc(100% - 3px) calc(100% - 6px),
      calc(100% - 6px) calc(100% - 6px),
      calc(100% - 6px) calc(100% - 3px),
      6px calc(100% - 3px),
      6px calc(100% - 6px),
      3px calc(100% - 6px),
      3px 50%,
      0px 50%
    );
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background: #ffffff10;
    display: block;
    pointer-events: none;
  }
  .pixel-corners::after {
    margin: -3px;
  }
  .pixel-corners:active {
    transform: translate(0, 3px);
  }

  @media (max-width: 768px) {
    .float-container {
      display: flex;
      flex-direction: column !important;
    }
  }
</style>
