---
import { contentfulClient } from "../../lib/contentful";
import type { work, header } from "../../lib/contentful";
import i18next, { t, changeLanguage } from "i18next";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import About from "../../components/About.astro";
import Contact from "../../components/Contact.astro";
import Work from "../../components/Work.astro";
import Button from "../../components/Button.astro";
import catchphrases from "../../../public/json/catchphrases.json";

changeLanguage("es");

let lang = i18next.language;
let localizedCatchphrases = catchphrases[lang];
const entries = await contentfulClient.getEntries<work>({
    content_type: "work",
});
let headerEntry = await contentfulClient.getEntries<header>({
    content_type: "header",
});
let header = headerEntry.items[0].fields.url;
header = header.replace("watch?v=", "embed/");
let posts = entries.items.map((item) => {
    const { slug, preview } = item.fields;
    return {
        slug,
        preview,
    };
});
---

<!doctype html>
<html lang={i18next.language}>
  <head>
    <BaseHead title={t("site.title")} description={t("site.description")} />
  </head>
  <body>
    <Header isIndex="opacity-0" />
    <img
      src="https://framerusercontent.com/images/CjzRK9qJBzg7lpVfLBIE8nOT1pU.png"
      alt="alex malvehy brand background"
      id="frame"
      class="top-0 left-0 w-screen h-screen z-0 fixed object-cover"
      style="object-position:20%;"
    />
    <div
      class="fadeOutScale w-screen h-[100dvh] mb-52 md:mb-0 flex sm:flex-row flex-col items-center justify-center sm:gap-[20%] scroll-snap-center"
    >
      <img
        src="/img/am_horizontal.png"
        alt="alex malvehy logo"
        class="top-16 left-1/2 w-60 -translate-x-1/2 absolute"
      />
      <h1
        class="sm:w-[300px] lg:text-8xl text-7xl tex-center sm:text-left pointer-events-none z-10 relative"
      >
        <span class="fadeup delay-1 ml-3">{t("home.more")}</span><br /><span
          class="fadeup delay-2 ml-10">{t("home.than")}</span
        ><br /><span
          id="catchphrase"
          class="fadeup delay-3 text-[#70F1B0] catchphrase-container"
          >{t("home.a_logo")}</span
        >
      </h1>
      <div class="lg:block hidden">
        <ul
          id="work-carousel2"
          class="mb-6 sm:mb-0 w-[90%] aspect-square sm:w-[400px] sm:h-[400px] grid grid-cols-2 grid-rows-2 gap-6 z-0 relative"
        >
        </ul>
        <!-- <iframe
          title="Youtube Video"
          class="xl:w-[610px] xl:h-[350px] w-[440px] h-[250px] pointer-events-none z-1 relative"
          allow="presentation; fullscreen; accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
          src={`${header}?iv_load_policy=3&amp;rel=0&amp;modestbranding=1&amp;playsinline=1&amp;autoplay=1&amp;mute=1&amp;loop=1&amp;color=white`}
          frameborder="0"></iframe>
        <span
          class="-translate-x-6 -translate-y-5 flex flex-row items-end justify-end gap-3"
        >
          <Button
            text="cv"
            externalhref="/pdf/cv.pdf"
            icon="https://framerusercontent.com/images/yBK8WGkZxlCuwBXsL4tGoX0TDr4.svg"
            white
          />
          <Button
            text="Portfolio (pdf)"
            externalhref="/pdf/portfolio.pdf"
            icon="https://framerusercontent.com/images/xKobCNxK5DGcLCya2LaxhCSpPsA.svg"
            white
          />
        </span> -->
      </div>
      <div class="bottom-20 opacity-60 hover:opacity-100 flex flex-row items-center justify-center gap-3 transition-all absolute">
        <Button
          text="Portfolio"
          externalhref="/pdf/Portfolio-alexmalvehy.pdf"
          icon="https://raw.githubusercontent.com/halfmage/pixelarticons/cd361925cb272ef38036f81d82ca7eb1984f0445/svg/article.svg"
        />
        <Button
          text="CV"
          externalhref="/pdf/CV-alexmalvehy.pdf"
          icon="https://raw.githubusercontent.com/halfmage/pixelarticons/cd361925cb272ef38036f81d82ca7eb1984f0445/svg/user.svg"
        />
      </div>
      <a
        href="#about"
        class="w-full bottom-6 flex flex-col items-center absolute"
      >
        <img
          src="https://unpkg.com/pixelarticons@1.8.1/svg/arrow-down.svg"
          alt="Arrow Down - View More"
          class="fadeOutInverted invert w-8 h-8 opacity-60 hover:opacity-100 transition-all"
        />
      </a>
    </div>
    <div
      id="about"
      class="fadeInScale flex flex-col items-center justify-center md:w-screen md:h-screen mb-52 md:mb-0 scroll-snap-center relative"
    >
      <About blob />
      <div
        class="w-[95%] max-w-[700px] mt-3 flex flex-row items-end justify-end relative"
      >
      </div>
    </div>
    <div
      class="fadeInScale flex flex-col items-center justify-center md:w-screen md:h-screen mb-52 md:mb-0 relative scroll-snap-center"
    >
      <Work />
    </div>
    <div
      class="fadeInScale w-full flex flex-col items-center justify-center md:w-screen md:h-screen relative scroll-snap-center"
    >
      <Contact blob="true/" />
    </div>
    <Footer />
    <div id="contact"></div>
    <script
      data-astro-rerun
      define:vars={{ posts, lang, localizedCatchphrases }}
    >
      document.addEventListener("astro:before-preparation", (event) => {
        clearInterval(taglineInterval);
      });

      let currentIndex = 1;
      console.log("Catchphrases " + localizedCatchphrases);

      function updateTagline() {
        const catchphrase = document.getElementById("catchphrase");
        const currentCatchphrase = localizedCatchphrases[currentIndex];

        const words = currentCatchphrase.split(" ");
        const animatedWords = words.map(
          (word) =>
            `<span class="word" style="position:relative;">${word}</span>`
        );
        catchphrase.innerHTML = animatedWords.join(" ");

        const spans = catchphrase.querySelectorAll(".word");
        spans.forEach((span, index) => {
          span.style.opacity = 0;
          span.style.top = "20px";
          setTimeout(
            () => {
              span.style.transition =
                "top 0.2s cubic-bezier(0,0,0,1), opacity 0.2s cubic-bezier(0,0,0,1)";
              span.style.top = "0px";
              span.style.opacity = 1;
            },
            100 + index * 100
          );
        });

        currentIndex = (currentIndex + 1) % localizedCatchphrases.length;
      }

      taglineInterval = setInterval(updateTagline, 4000);

      // Make id="frame" opaque when scrolling
      document.addEventListener("scroll", () => {
        const frame = document.getElementById("frame");
        const scroll = window.scrollY;
        const maxScroll = 1000;
        const opacity = 1 - scroll / maxScroll;
        frame.style.opacity = opacity < 0 ? 0 : opacity;
      });
    </script>

    <script data-astro-rerun define:vars={{ posts, lang }}>
      document.addEventListener("astro:before-preparation", (event) => {
        clearInterval(carouselInterval);
      });

      function updateCarousel() {
        let filteredPosts = posts.sort(() => Math.random() - 0.5).slice(0, 4);

        const carousel2 = document.getElementById("work-carousel2");

        // Check if the carousel is being hovered
        if (carousel2.matches(":hover")) {
          return; // Do not update if the carousel is being hovered
        }

        // Add fade-out class to all children
        Array.from(carousel2.children).forEach((child, index) => {
          child.style.animation = `fadeOut 0.5s cubic-bezier(0,0,0,1) ${index * 0.1}s forwards`;
        });

        // Wait for the fade-out animation to complete before updating the content
        setTimeout(
          () => {
            carousel2.innerHTML = filteredPosts
              .map((post, index) => {
                let translateX, translateY;
                switch (index) {
                  case 0:
                    translateX = 0;
                    translateY = 0;
                    break;
                  case 1:
                    translateX = -40;
                    translateY = -40;
                    break;
                  case 2:
                    translateX = 40;
                    translateY = -40;
                    break;
                  case 3:
                    translateX = 0;
                    translateY = -80;
                    break;
                  default:
                    translateX = (index + 1) * 100;
                    translateY = (index + 1) * 100;
                    break;
                }
                return `
                <li transition:name="work-title-${post.title}-image" class="tile w-full h-full flex flex-col items-center justify-center gap-3 overflow-hidden" style="transform: translate(${translateX}px, ${translateY}px); animation: fadeIn 0.5s cubic-bezier(0,0,0,1) ${index * 0.1}s forwards; opacity:0; aspect-ratio:1;">
                  <a href="${lang === "en" ? "" : `/${lang}`}/work/${post.slug}" class="w-full h-full">
                    <img src="${post.preview.fields.file.url}" class="w-full h-full object-cover" alt="${post.title}">
                  </a>
                </li>
              `;
              })
              .join("");
          },
          carousel2.children.length * 100 + 500
        ); // Ensure the timeout matches the duration of the fade-out animation
        document.querySelectorAll(".tile").forEach((tile) => {
          tile.style.opacity = 1;
        });
      }

      updateCarousel();
      carouselInterval = setInterval(updateCarousel, 5000);
    </script>

    <style>
      .catchphrase-container {
        display: inline-block;
        white-space: nowrap;
        max-width: 100%; /* Adjust as needed */
      }

      .word {
        display: inline-block;
      }

      .letter {
        display: inline-block;
        width: 1ch; /* Fixed width for each letter */
        text-align: center; /* Center the letter within the span */
      }
      main {
        scroll-snap-type: y mandatory;
      }
      .scroll-snap-center {
        scroll-snap-align: center;
      }

      .fadeInScale {
        animation: auto linear fadeInScale both;
        animation-timeline: view();
        animation-range: entry 25% cover 50%;
      }

      .fadeOutScale {
        animation: auto linear fadeOutScale both;
        animation-timeline: view();
        animation-range: exit;
      }

      .fadeOutInverted {
        animation: auto linear fadeOutInverted both;
        animation-timeline: scroll();
        animation-range: exit;
      }

      #frame {
        animation: auto linear fadeOutScroll both;
        animation-timeline: scroll();
        animation-range: cover 00% cover 30%;
      }

      .fadeup {
        opacity: 0;
        animation: fadeup 0.2s cubic-bezier(0, 0, 0, 1) forwards;
        position: relative;
      }

      .delay-1 {
        animation-delay: 0.1s;
      }

      .delay-2 {
        animation-delay: 0.2s;
      }

      .delay-3 {
        animation-delay: 0.3s;
      }

      @keyframes fadeup {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          margin-top: 20px;
        }
        to {
          opacity: 1;
          margin-top: 0;
        }
      }

      @keyframes fadeOut {
        from {
          opacity: 1;
          margin-top: 0;
        }
        to {
          opacity: 0;
          margin-top: -20px;
        }
      }

      @keyframes fadeInScale {
        0% {
          opacity: 0;
          transform: translate(0, 200px);
        }
        100% {
          opacity: 1;
          transform: translate(0, 0);
        }
      }

      @keyframes fadeOutScale {
        0% {
          opacity: 1;
          transform: translate(0, 0px);
        }
        100% {
          opacity: 0;
          transform: translate(0, 500px);
        }
      }

      @keyframes fadeOutInverted {
        0% {
          opacity: 1;
          transform: translate(0, 0px);
        }
        100% {
          opacity: 0;
          transform: translate(0, -500px);
        }
      }

      @keyframes fadeOutScroll {
        0% {
          opacity: 1;
          transform: translate(0, 0px);
          clip-path: inset(0 0 0 0);
        }
        100% {
          opacity: 0;
          transform: translate(0, -500px);
          clip-path: inset(0 0 40% 0);
        }
      }
    </style>
  </body>
</html>
