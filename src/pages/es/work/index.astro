---
import { contentfulClient } from "../../../lib/contentful";
import type { work } from "../../../lib/contentful";
import { localizePath } from "astro-i18next";
import BaseHead from "../../../components/BaseHead.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import i18next, { t, changeLanguage } from "i18next";

changeLanguage("es");

const entries = await contentfulClient.getEntries<work>({
    content_type: "work",
});
const extra = await contentfulClient.getEntries({
    content_type: "extra",
});
const posts = entries.items.map((item) => {
    const { title, slug, type, year, preview, gif, blobColor } = item.fields;
    return {
        title,
        slug,
        type,
        year,
        preview,
        gif,
        splitTitle: title.split(" "),
        blobColor,
    };
});
const extraPosts = extra.items.map((item) => {
    const { title, slug, type, color, year, services, preview, description, content, } = item.fields;
    return {
        title,
        slug,
        type,
        color,
        year,
        services,
        preview,
        description,
        content,
    };
});
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={`${t("header.work")} | ${t("site.title")}`}
      description={t("site.description")}
    />
  </head>
  <body>
    <Header isWork />
    <img
      src="/img/blob-2.avif"
      id="blob-2"
      class="w-[1300px] max-w-[1300px] sm:max-w-full left-1/2 sm:left-0 -translate-x-1/2 sm:translate-x-0 sm:w-auto translate-y-[0px] sm:-translate-y-[100px] absolute"
    />
    <main class="pt-40 flex flex-col items-center justify-center relative">
      <div
        class="mb-6 max-w-[1400px] w-[95%] flex flex-row items-center justify-between gap-20 z-1 relative"
      >
        <h1
          class="w-screen m-0 my-18 mb-28 text-8xl font-[MGNHumble] text-center text-white translate-y-3"
          transition:name="work-head-title"
        >
          {t("header.work")}
        </h1>
      </div>
      <section class="max-w-[1400px] w-[95%] relative">
        <ul
          class="mt-3 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 grid-rows-2 sm:gap-16 gap-6"
        >
          {
            posts.map((post, index) => (
              <li
                data-type={post.type}
                class={`sm:mb-6 hover:shadow-xl shadow-white z-0 hover:z-10 relative ${index % 2 !== 0 ? "lg:top-32 move-fast" : "move-slow"}`}
                style="aspect-ratio: 1 / 1;"
              >
                <a
                  class="flex flex-row items-start justify-between sm:gap-5 relative"
                  href={localizePath(`/work/${post.slug}/`)}
                >
                  <div
                    class={`img-${index} work-hover w-full h-full overflow-hidden transition-all z-10 relative`}
                    onmousemove={`handleMouseMove(${index})`}
                    onmouseleave={`resetTransform(${index})`}
                  >
                    {post.preview && (
                      <>
                        <img
                          src={(post.preview as any)?.fields?.file?.url}
                          alt=""
                          class={`w-full h-full object-cover ${post.gif ? "img" : ""}`}
                          transition:name={`work-title-${post.title}-image`}
                        />
                        {post.gif && (
                          <img
                            src={(post.gif as any)?.fields?.file?.url}
                            alt=""
                            class="gif top-0 w-full h-full object-cover absolute"
                            transition:name={`work-title-${post.title}-gif`}
                          />
                        )}
                      </>
                    )}
                  </div>
                  <div style="opacity:0.7; overflow:hidden;">
                    <img
                      src="/img/blob-1.webp"
                      alt=""
                      transition:name={`work-title-${post.title}-blob`}
                      class="blob hover-show -translate-x-1/2 translate-y-1/3 pointer-events-none z-0 absolute"
                      style={`filter: drop-shadow(0px -1000px 0 ${post.blobColor});`}
                    />
                  </div>
                  <div class="hover-show bottom-0 right-0 translate-y-[80%] w-full items-center justify-end flex flex-row pointer-events-none z-10 absolute">
                    <h2
                      class="sm:flex hidden bottom-0 left-0 w-[230px] -translate-x-1/2 -translate-y-6 flex-wrap text-left m-0 fadeup font-[MGNHumble] text-white z-10 absolute"
                      transition:name={`work-title-${post.title}`}
                    >
                      {post.splitTitle.map((word, index) => (
                        <span
                          style={`animation: fadeupword 0.3s cubic-bezier(0, 0, 0, 1) ${index * 0.3}s forwards; opacity: 0; margin-left: ${index * 10}px;`}
                        >
                          {word}
                        </span>
                      ))}
                    </h2>
                    <div class="sm:-translate-x-4 translate-y-3 flex flex-col items-end">
                      <p
                        class={`m-0 text-white text-right text-2xl font-semibold`}
                        transition:name={`work-title-${post.title}-type`}
                      >
                        {post.type}
                      </p>
                      <p
                        class={`m-0 text-white text-right text-lg opacity-60`}
                        transition:name={`work-title-${post.title}-year`}
                      >
                        {post.year}
                      </p>
                    </div>
                  </div>
                </a>
              </li>
            ))
          }
        </ul>
      </section>
      <ul
        class="mt-16 sm:mt-0 w-full max-w-[1400px] flex flex-wrap flex-col items-start justify-start gap-8 relative"
      >
        <h2 class="border-b-2 border-white">Extra</h2>
        {
          extraPosts.map((post, index) => (
            <li
              class="w-full p-3 hover:bg-white/10 flex flex-col overflow-hidden relative"
              onclick={`toggleExpand(${index})`}
            >
              <div class="flex flex-row gap-3">
                <div class="top-0 left-0 w-full h-full flex flex-ro pointer-events-none z-0 absolute">
                  <div
                    class="w-full h-full opacity-30 z-10 absolute"
                    style={`background-color:${post.color ? post.color : '#ffffff30'}`}
                  />
                </div>
                {post.preview && (
                  <img
                  src={(post.preview as any)?.fields?.file?.url}
                    alt=""
                    class="w-32 h-32 z-10"
                  />
                )}
                <div class="ml-3 sm:ml-6 flex flex-row items-center justify-between gap-8 z-10">
                  <div class="flex flex-col items-start">
                    <h1 class="w-auto mb-0 text-2xl sm:text-4xl text-white sm:overflow-hidden sm:text-ellipsis sm:whitespace-nowrap">
                    {post.title}
                  </h1>
                  <p class="max-w-[600px] line-clamp-2">{post.description}</p>
                  </div>
                  <div class="hidden mr-6 sm:flex flex-row gap-16">
                    {post.type && (
                      <span class="flex flex-col">
                        <p class="m-0 text-white opacity-60">
                          {t("slug.client")}
                        </p>
                        <p class="m-0 text-white">{post.type}</p>
                      </span>
                    )}
                    {post.year && (
                      <span class="flex flex-col">
                        <p class="m-0 text-white opacity-60">
                          {t("slug.year")}
                        </p>
                        <p class="m-0 text-white">{typeof post.year === 'string' ? post.year.slice(0, 4) : post.year}</p>
                      </span>
                    )}
                    {post.services && (
                      <span class="flex flex-col">
                        <p class="m-0 text-white opacity-60">
                          {t("slug.services")}
                        </p>
                        <p class="m-0 text-white flex flex-col">
                          {Array.isArray(post.services) && post.services.map((service) => (
                            <span>{service}</span>
                          ))}
                        </p>
                      </span>
                    )}
                  </div>
                </div>
              </div>
                           <div
                id={`content-${index}`}
                class="animatein mt-6 hidden w-full whitespace-nowrap overflow-x-auto snap-x snap-mandatory"
              >
                {Array.isArray(post.content) && post.content.map((item) => (
                  <div class="inline-block w-full lg:w-1/2 p-2 snap-start">
                    <img
                      src={item.fields.file.url}
                      alt=""
                      class="w-full object-cover"
                    />
                    <p class="font-bold">{item.fields.title}</p>
                    <p>{item.fields.description}</p>
                  </div>
                ))}
              </div>
            </li>
            <hr class="w-full opacity-30 border-white" />
          ))
        }
      </ul>
    </main>
    <Footer />
  </body>
</html>

<script is:inline data-astro-rerun>
  window.addEventListener("scroll", () => {
    const blob2 = document.getElementById("blob-2");
    const scrollPosition = window.scrollY;
    const screenHeight = window.innerHeight;
    
    if (blob2 && window.innerWidth > 900) {
      blob2.style.transform = `translateY(-${scrollPosition * 0.5 + 100}px)`;
    } else if (blob2) {
      blob2.style.opacity = `${0.8 - scrollPosition / screenHeight}`;
      blob2.style.transform = `translate(-50%, -${scrollPosition * 0.5}px)`;
    }

    const screenWidth = window.innerWidth;

    const moveFastElements = document.querySelectorAll(".move-fast");
    const moveSlowElements = document.querySelectorAll(".move-slow");

    if (screenWidth > 1200) {
      if (moveFastElements.length > 0) {
        moveFastElements.forEach((element) => {
          element.style.transform = `translateY(-${scrollPosition * 0.3}px)`;
        });
      }

      if (moveSlowElements.length > 0) {
        moveSlowElements.forEach((element) => {
          element.style.transform = `translateY(-${scrollPosition * 0.1}px)`;
        });
      }
    } else {
      if (moveFastElements.length > 0) {
        moveFastElements.forEach((element) => {
          element.style.transform = `translateY(0px)`;
        });
      }

      if (moveSlowElements.length > 0) {
        moveSlowElements.forEach((element) => {
          element.style.transform = `translateY(0px)`;
        });
      }
    }
  });
</script>

<script is:inline>
    let expandedIndex = null;

function toggleExpand(index) {
  const content = document.getElementById(`content-${index}`);
  if (expandedIndex !== null && expandedIndex !== index) {
    const previousContent = document.getElementById(
      `content-${expandedIndex}`
    );
    previousContent.classList.add("animateout");
    setTimeout(() => {
      previousContent.classList.add("hidden");
      previousContent.classList.remove("animateout");
    }, 300);
  }
  if (content.classList.contains("hidden")) {
    content.classList.remove("hidden");
  } else {
    content.classList.add("animateout");
    setTimeout(() => {
      content.classList.add("hidden");
      content.classList.remove("animateout");
    }, 300);
  }
  expandedIndex = index;
}

  function handleMouseMove(id) {
    const target = document.querySelector(`.img-${id}`);
    const rect = target.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const moveX = (x / rect.width - 0.5) * 5; // Adjust the multiplier for desired effect
    const moveY = (y / rect.height - 0.5) * 5; // Adjust the multiplier for desired effect

    target.querySelectorAll("img").forEach((img) => {
      img.style.transform = `scale(1.05) translate(${moveX}px, ${moveY}px)`;
    });
  }

  function resetTransform(id) {
    const target = document.querySelector(`.img-${id}`);
    target.querySelectorAll("img").forEach((img) => {
      img.style.transform = "scale(1) translate(0, 0)";
    });
  }
</script>

<style>
  @supports (animation-timeline: view()) {
    @keyframes animate-in-and-out {
      entry 0% {
        opacity: 0;
        scale: 0.8;
      }
      entry 100% {
        opacity: 1;
        scale: 1;
      }
      exit 0% {
        opacity: 1;
        scale: 1;
      }
      exit 100% {
        opacity: 0;
        scale: 0.8;
      }
    }

    ul li {
      opacity: 0;
      scale: 0.8;
      animation: linear animate-in-and-out;
      animation-timeline: view();
    }
  }

  @keyframes fadeupword {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animatein {
    animation: slidedown 0.3s cubic-bezier(0, 0, 0, 1) both;
  }

  .animateout {
    animation: slideup 0.3s cubic-bezier(0, 0, 0, 1) both;
  }

  @keyframes slidedown {
    0% {
      height: 0;
    }
    100% {
      content-visibility: auto;
  height: calc-size(auto, size);
    }
  }

  @keyframes slideup {
    0% {
      height: calc-size(auto, size);
    }
    100% {
      height: 0;
    }
  }

  .work-hover:hover .gif {
    opacity: 1;
    transition: 0.3s cubic-bezier(0, 0, 0, 1);
  }
  .work-hover:hover .img {
    opacity: 0;
    transition: 0.3s cubic-bezier(0, 0, 0, 1);
  }
  .work-hover .img {
    opacity: 1;
    transition: 0.3s cubic-bezier(0, 0, 0, 1);
  }
  .work-hover .gif {
    opacity: 0;
    transition: 0.3s cubic-bezier(0, 0, 0, 1);
  }

  .blob {
    transform: scale(150%) translateY(1050px) translateX(-300px);
  }

  @media screen and (max-width: 900px) {
    .blob {
      transform: scale(150%) translateY(1050px) translateX(-100px);
    }
  }
</style>
