---
import { contentfulClient } from "../lib/contentful";
import type { work } from "../lib/contentful";
import i18next, { t, changeLanguage } from "i18next";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import About from "../components/About.astro";
import Contact from "../components/Contact.astro";
import Work from "../components/Work.astro";
import Button from "../components/Button.astro";
import catchphrases from "../../public/json/catchphrases.json";

changeLanguage("en");

let lang = i18next.language;
let localizedCatchphrases = catchphrases[lang];
const entries = await contentfulClient.getEntries<work>({
    content_type: "work",
});
let posts = entries.items.map((item) => {
    const { slug, preview } = item.fields;
    return {
        slug,
        preview,
    };
});
---

<!doctype html>
<html lang={i18next.language}>
  <head>
    <BaseHead title={t("site.title")} description={t("site.description")} />
  </head>
  <body>
    <Header isIndex="opacity-0" />
    <iframe
      id="frame"
      src="/html/frame_index.html"
      class="top-0 left-0 w-screen h-screen z-0 fixed"
      transition:name="bg-iframe"></iframe>
    <div
      class="fadeOutScale w-screen h-screen mb-52 md:mb-0 flex sm:flex-row flex-col items-center justify-center sm:gap-[20%] scroll-snap-center"
    >
      <h1
        class="sm:w-[300px] lg:text-8xl tex-center sm:text-left pointer-events-none z-10 relative"
      >
        <span class="fadeup delay-1 ml-3">{t("home.more")}</span><br /><span
          class="fadeup delay-2 ml-10">{t("home.than")}</span
        ><br /><span
          id="catchphrase"
          class="fadeup delay-3 text-[#70F1B0] catchphrase-container"
          >{t("home.a_logo")}</span
        >
      </h1>
      <ul
        id="work-carousel"
        class="w-[400px] h-[400px] grid grid-cols-2 grid-rows-2 gap-6 sm:pointer-events-auto pointer-events-none sm:opacity-100 opacity-10 z-0 sm:relative absolute"
      >
      </ul>
      <a
        href="#about"
        class="w-full bottom-6 flex flex-col items-center absolute"
      >
        <img
          src="https://unpkg.com/pixelarticons@1.8.1/svg/arrow-down.svg"
          alt="Arrow Down - View More"
          class="fadeOutInverted invert w-8 h-8 opacity-60 hover:opacity-100 transition-all"
        />
      </a>
    </div>
    <div
      id="about"
      class="fadeInScale flex flex-col items-center justify-center md:w-screen md:h-screen mb-52 md:mb-0 scroll-snap-center relative"
    >
      <About blob=true/>
      <div
        class="w-[95%] max-w-[700px] mt-3 flex flex-row items-end justify-end relative"
      >
        <Button text={t("button.more")} href="/about" />
      </div>
    </div>
    <div
      class="fadeInScale flex flex-col items-center justify-center md:w-screen md:h-screen mb-52 md:mb-0 relative scroll-snap-center"
    >
      <Work />
    </div>
    <div
      class="fadeInScale w-full flex flex-col items-center justify-center md:w-screen md:h-screen relative scroll-snap-center"
    >
      <Contact blob=true/>
    </div>
    <Footer />
    <script data-astro-rerun define:vars={{ posts, lang, localizedCatchphrases }}>
        document.addEventListener('astro:before-preparation', event => {
          clearInterval(carouselInterval);
          clearInterval(taglineInterval);
        })

      function updateCarousel() {
        let filteredPosts = posts.sort(() => Math.random() - 0.5).slice(0, 4);

        function getRandomTransform() {
          const randomX = Math.floor(Math.random() * 100) - 50; // Random value between -50 and 50
          const randomY = Math.floor(Math.random() * 100) - 50; // Random value between -50 and 50
          return `translate(${randomX}px, ${randomY}px)`;
        }

        const carousel = document.getElementById("work-carousel");

        // Check if the carousel is being hovered
        if (carousel.matches(":hover")) {
          return; // Do not update if the carousel is being hovered
        }

        // Add fade-out class to all children
        Array.from(carousel.children).forEach((child, index) => {
          child.style.animation = `fadeOut 0.5s cubic-bezier(0,0,0,1) ${index * 0.1}s forwards`;
        });

        // Wait for the fade-out animation to complete before updating the content
        setTimeout(
          () => {
            carousel.innerHTML = filteredPosts
              .map(
                (post, index) => `
                  <li transition:name="work-title-${post.title}-image"  class="tile w-full h-full flex flex-col items-center justify-center gap-3 grayscale hover:grayscale-0 hover:scale-105 hover:border-4 border-0 border-white/20 overflow-hidden" style="transform: ${getRandomTransform()}; animation: fadeIn 0.5s cubic-bezier(0,0,0,1) ${index * 0.1}s forwards; opacity:0; aspect-ratio:1;">
<a href="${lang === "en" ? "" : `/${lang}`}/work/${post.slug}" class="w-full h-full">
                    <img src="${post.preview.fields.file.url}" class="w-full h-full object-cover" alt="${post.title}">
                    </a>
                  </li>
                `
              )
              .join("");
          },
          carousel.children.length * 100 + 500
        ); // Ensure the timeout matches the duration of the fade-out animation
        document.querySelectorAll(".tile").forEach((tile) => {
          tile.style.opacity = 1;
        });
      }

      let currentIndex = 1;
      console.log("Catchphrases " + localizedCatchphrases);

      function updateTagline() {
        const catchphrase = document.getElementById("catchphrase");
        const currentCatchphrase = localizedCatchphrases[currentIndex];
      
        const words = currentCatchphrase.split(" ");
        const animatedWords = words.map(
          (word) => `<span class="word" style="position:relative;">${word}</span>`
        );
        catchphrase.innerHTML = animatedWords.join(" ");
      
        const spans = catchphrase.querySelectorAll(".word");
        spans.forEach((span, index) => {
          span.style.opacity = 0;
          span.style.top = "20px";
          setTimeout(() => {
            span.style.transition = "top 0.5s cubic-bezier(0,0,0,1), opacity 0.5s cubic-bezier(0,0,0,1)";
            span.style.top = "0px";
            span.style.opacity = 1;
          }, 100 + index * 100);
        });
      
        currentIndex = (currentIndex + 1) % localizedCatchphrases.length;
      }

      updateCarousel();
      carouselInterval = setInterval(updateCarousel, 5000);
      taglineInterval = setInterval(updateTagline, 5000);
    </script>

    <style>
      .catchphrase-container {
        display: inline-block;
        white-space: nowrap;
        max-width: 100%; /* Adjust as needed */
      }

      .word {
        display: inline-block;
      }

      .letter {
        display: inline-block;
        width: 1ch; /* Fixed width for each letter */
        text-align: center; /* Center the letter within the span */
      }
      main {
        scroll-snap-type: y mandatory;
      }
      .scroll-snap-center {
        scroll-snap-align: center;
      }

      .fadeInScale {
        animation: auto linear fadeInScale both;
        animation-timeline: view();
        animation-range: entry 25% cover 50%;
      }

      .fadeOutScale {
        animation: auto linear fadeOutScale both;
        animation-timeline: view();
        animation-range: exit;
      }

      .fadeOutInverted {
        animation: auto linear fadeOutInverted both;
        animation-timeline: scroll();
        animation-range: exit;
      }

      #frame {
        animation: auto linear fadeOutScroll both;
        animation-timeline: scroll();
        animation-range: cover 00% cover 30%;
      }

      .fadeup {
        opacity: 0;
        animation: fadeup 1s cubic-bezier(0, 0, 0, 1) forwards;
        position: relative;
      }

      .delay-1 {
        animation-delay: 0.1s;
      }

      .delay-2 {
        animation-delay: 0.2s;
      }

      .delay-3 {
        animation-delay: 0.3s;
      }

      @keyframes fadeup {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          margin-top: 20px;
        }
        to {
          opacity: 1;
          margin-top: 0;
        }
      }

      @keyframes fadeOut {
        from {
          opacity: 1;
          margin-top: 0;
        }
        to {
          opacity: 0;
          margin-top: -20px;
        }
      }

      @keyframes fadeInScale {
        0% {
          opacity: 0;
          transform: translate(0, 200px);
        }
        100% {
          opacity: 1;
          transform: translate(0, 0);
        }
      }

      @keyframes fadeOutScale {
        0% {
          opacity: 1;
          transform: translate(0, 0px);
        }
        100% {
          opacity: 0;
          transform: translate(0, 500px);
        }
      }

      @keyframes fadeOutInverted {
        0% {
          opacity: 1;
          transform: translate(0, 0px);
        }
        100% {
          opacity: 0;
          transform: translate(0, -500px);
        }
      }

      @keyframes fadeOutScroll {
        0% {
          opacity: 1;
          transform: translate(0, 0px);
          clip-path: inset(0 0 0 0);
        }
        100% {
          opacity: 0;
          transform: translate(0, -500px);
          clip-path: inset(0 0 40% 0);
        }
      }
    </style>
  </body>
</html>
