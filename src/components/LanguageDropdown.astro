---
import i18next from "i18next";
const { isMobile } = Astro.props;

function getLangName(lang) {
  switch (lang) {
    case "en":
      return "English";
    case "es":
      return "Español";
    case "ca":
      return "Català";
    default:
      break;
  }
}

function removeLangFromRoute(route) {
  const segments = route.split("/");
  if (i18next.languages.includes(segments[1])) {
    segments.splice(1, 1);
  }
  return segments.join("/");
}

const currentRoute = removeLangFromRoute(Astro.url.pathname);
---

{!isMobile && (
  <button
    onclick="toggleLangDropdown()"
    class="btn-lang w-8 h-8 inline-block relative"
  >
    <img src={`/img/emoji/${i18next.language}.png`} alt={`${i18next.language} Flag deselected`} class="color w-8" />
    <img src={`/img/emoji/${i18next.language}_white.png`} alt={`${i18next.language} Flag selected`} class="white top-1 absolute" style="filter:brightness(1000000000);" />
  </button>
)}

<ul id="langDropdown" class={`z-50 ${isMobile ? 'left-2 flex flex-row gap-6 relative' : 'right-24 top-20 hidden absolute'}`}>
  {
    i18next.languages
      .filter((lang) => isMobile || lang !== i18next.language)
      .map((lang) => (
        <li class="mr-2 mb-3 transition-all" style="opacity:1; transform:translateY(0);">
          <a
            href={`${lang === "en" ? "" : "/" + lang}${currentRoute}`}
            class="btn-lang text-white flex flex-row items-center justify-end gap-3"
          >
            { !isMobile && <p>{getLangName(lang)}</p> }
            <img src={`/img/emoji/${lang}.png`} alt={`${lang} Flag deselected`} class={`${lang !== i18next.language ? 'color' : ''} w-7`} />
            {lang !== i18next.language && (
              <img src={`/img/emoji/${lang}_white.png`} alt={`${lang} Flag selected`} class="white w-7 absolute" style="filter:brightness(1000000000);" />
            )}
          </a>
        </li>
      ))
  }
</ul>

<script is:inline data-astro-rerun>
  function toggleLangDropdown() {
    const dropdown = document.getElementById("langDropdown");
    const links = dropdown.querySelectorAll("li");

    if (dropdown.classList.contains("hidden")) {
      dropdown.classList.remove("hidden");
      dropdown.classList.remove("pointer-events-none");

      links.forEach((link, index) => {
        setTimeout(() => {
          link.style.opacity = "1";
          link.style.transform = "translateY(0)";
        }, index * 100);
      });
    } else {
      links.forEach((link, index) => {
        setTimeout(() => {
          link.style.opacity = "0";
          link.style.transform = "translateY(-20px)";
        }, index * 100);
      });

      setTimeout(() => {
        dropdown.classList.add("hidden");
        dropdown.classList.add("pointer-events-none");
      }, links.length * 100);
    }
  }
</script>

<style>
  a:hover p {
    transform: translate(0px, 0);
    opacity: 1;
    transition: 0.2s;
  }
  a:hover img {
    opacity: 1;
    transition: opacity 0.2s;
  }
  a img {
    opacity: 0.8;
  }
  a p {
    transform: translate(20px, 0);
    opacity: 0;
    transition: 0.2s;
  }

  .btn-lang:hover .white {
    opacity: 0;
    transition: opacity 0.2s;
  }
  .btn-lang .white {
    opacity: 0.6;
  }
  .btn-lang:hover .color {
    opacity: 1;
    transition: opacity 0.2s;
  }
  .btn-lang .color {
    opacity: 0;
  }
  .btn-lang {
    transition: 0.2s;
  }

  .btn-lang:active .white, .btn-lang:active .color {
    transform: scale(0.95);
    transition: 0.2s;
  }
</style>