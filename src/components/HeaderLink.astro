---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'>;

const { href, class: className, ...props } = Astro.props;

const { pathname } = Astro.url;
const subpath = pathname.match(/[^\/]+/g);
const isActive = href === pathname || href === '/' + subpath?.[0];
---
<a href={href} id={href?.toString()} class:list={[className, { active: isActive }]} {...props} onmousedown="handleMouseOver({id})">
    <slot />
</a>

<style>
    a {
        font-family: 'InstrumentSans', system-ui;
        font-weight: 600;
        font-size: 23px;
        color: #ffffff60;
        display: inline-block;
        text-decoration: none;
    }
    a:hover {
        color: #ffffff90;
    }
    a.active {
        color: #ffffff;
    }
    span {
        display: inline-block;
        transition: font-family 0.3s ease;
    }
    .hovered {
        font-family: 'MGNHumble', system-ui !important;
    }
</style>

<script is:inline>
    function handleMouseOver(event) {
        const target = document.getElementById(event.id);
        const text = target.innerText;
        const letters = text.split('');
        target.innerHTML = letters.map(letter => `<span>${letter}</span>`).join('');

        const spans = target.querySelectorAll('span');
        spans.forEach((span, index) => {
            span.style.opacity = '0';
            setTimeout(() => {
                span.style.transition = 'opacity 0.5s ease-in-out';
                span.style.opacity = '1';
            }, index * 100); // Stagger effect with 100ms delay between each span
        });
    }
</script>