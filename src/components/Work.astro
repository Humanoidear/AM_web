---
import i18next, { t, changeLanguage } from "i18next";
import { contentfulClient } from "../lib/contentful";
import type { work } from "../lib/contentful";
import Button from "../components/Button.astro";

let lang = i18next.language;
const entries = await contentfulClient.getEntries<work>({
    content_type: "work",
});
let posts = entries.items.map((item) => {
    const { slug, preview } = item.fields;
    return {
        slug,
        preview,
    };
});
---

<div class="flex md:flex-row flex-col-reverse items-center gap-10">
  <img src="/img/blob-1.webp" alt="" class="hidden lg:block w-1/3 translate-x-80 -rotate-90 absolute">
  <div class="fadeup md:w-[calc(100%-13rem)] md:max-w-[500px] w-[90%] z-10 relative">
    <h1 class="text-[MGNHumble] md:text-7xl text-6xl text-white">
      {t("header.work")}
    </h1>
    <p class="leading-7">
      {t("work.catch")}
    </p>
    <div class="mt-6 relative">
      <Button text={t("work.button")} href="/work" />
    </div>
  </div>
  <ul
        id="work-carousel"
        class="mb-6 sm:mb-0 w-[90%] aspect-square overflow-hidden sm:overflow-visible sm:w-[400px] sm:h-[400px] grid grid-cols-2 grid-rows-2 gap-6 z-0 relative"
      >
      </ul>
</div>

<script data-astro-rerun define:vars={{ posts, lang }}>
  document.addEventListener('astro:before-preparation', event => {
    clearInterval(carouselInterval);
  });

  function updateCarousel() {
    let filteredPosts = posts.sort(() => Math.random() - 0.5).slice(0, 4);

    function getRandomTransform() {
      if (window.innerWidth > 600) {
        const randomX = Math.floor(Math.random() * 200) - 100; // Random value between -100 and 100
        const randomY = Math.floor(Math.random() * 200) - 100; // Random value between -100 and 100
        return `translate(${randomX}px, ${randomY}px)`;
      } 
    }

    const carousel = document.getElementById("work-carousel");

    // Check if the carousel is being hovered
    if (carousel.matches(":hover")) {
      return; // Do not update if the carousel is being hovered
    }

    // Add fade-out class to all children
    Array.from(carousel.children).forEach((child, index) => {
      child.style.animation = `fadeOut 0.5s cubic-bezier(0,0,0,1) ${index * 0.1}s forwards`;
    });

    // Wait for the fade-out animation to complete before updating the content
    setTimeout(
      () => {
        carousel.innerHTML = filteredPosts
          .map(
            (post, index) => `
              <li transition:name="work-title-${post.title}-image"  class="tile w-full h-full flex flex-col items-center justify-center gap-3 hover:scale-105 hover:border-4 border-0 border-white/20 overflow-hidden" style="transform: ${getRandomTransform()}; animation: fadeIn 0.5s cubic-bezier(0,0,0,1) ${index * 0.1}s forwards; opacity:0; aspect-ratio:1;">
                <a href="${lang === "en" ? "" : `/${lang}`}/work/${post.slug}" class="w-full h-full">
                  <img src="${post.preview.fields.file.url}" class="w-full h-full object-cover" alt="${post.title}">
                </a>
              </li>
            `
          )
          .join("");
      },
      carousel.children.length * 100 + 500
    ); // Ensure the timeout matches the duration of the fade-out animation
    document.querySelectorAll(".tile").forEach((tile) => {
      tile.style.opacity = 1;
    });
  }

  updateCarousel();
  carouselInterval = setInterval(updateCarousel, 5000);
</script>
